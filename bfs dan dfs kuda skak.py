papan =  {'1':set(['18','11']),
         '2':set(['12','17','19']),
         '3':set(['18','20','9','13']),
         '4':set(['10','14','19','21']),
         '5':set(['15','11','20','22']),
         '6':set(['16','12','21','27']),
         '7':set(['24','22','13']),
         '8':set(['14','23']),
         '9':set(['3','19','26']),
         '10':set(['4','20','25','27']),
         '11':set(['1','5','21','17','26','28']),
         '12':set(['6','2','18','22','27','29']),
         '13':set(['7','3','19','23','28','30']),
         '14':set(['8','20','4','24','29','31']),
         '15':set(['5','30','32','21']),
         '16':set(['6','22','23']),
         '17':set(['2','26b','27','11']),
         '18':set(['1','25b','27b','3','12','28']),
         '19':set(['2','4','26b','28b','9','25','29','13']),
         '20':set(['3','5','10','26','30','14','27b','29b']),
         '21':set(['4','6','28b','30b','11','27','31','15']),
         '22':set(['5','7','29b','31b','12','28','32','16']),
         '23':set(['6','8','30b','32b','13','29']),
         '24':set(['7','31b','14','30']),
         '25':set(['10','18b','27b','19']),
         '26':set(['9','11','17b','19b','28b','20']),
         '27':set(['10','12','18b','20b','29b','21','17','25b']),
         '28':set(['18','26b','30b','22','11','13','19b','21b']),
         '29':set(['12','14','20b','22b','31b','23','19','27b']),
         '30':set(['13','15','40','24','45','47','20','36']),
         '31':set(['14','16','22b','24b','21','29b']),
         '32':set(['15','23b','22','30b']),
         '1b':set(['18b','11b']),
         '2b':set(['12b','17b','19b']),
         '3b':set(['18b','20b','9b','13b']),
         '4b':set(['10b','14b','19b','21b']),
         '5b':set(['15b','11b','20b','22b']),
         '6b':set(['16b','12b','21b','27b']),
         '7b':set(['24b','22b','13b']),
         '8b':set(['14b','23b']),
         '9b':set(['3b','19b','26b']),
         '10b':set(['4b','20b','25b','27b']),
         '11b':set(['1b','5b','21b','17b','26b','28b']),
         '12b':set(['6b','2b','18b','22b','27b','29b']),
         '13b':set(['7b','3b','19b','23b','28b','30b']),
         '14b':set(['8b','20b','4b','24b','29b','31b']),
         '15b':set(['5b','30b','32b','21b']),
         '16b':set(['6b','22b','23b']),
         '17b':set(['2b','34b','27b','11b']),
         '18b':set(['1b','33b','35b','3b','12b','28b']),
         '19b':set(['2b','4b','34b','36b','9b','25b','29b','13b']),
         '20b':set(['3b','5b','10b','26b','30b','14b','35b','37b']),
         '21b':set(['4b','6b','28','30','11b','27b','31b','15b']),
         '22b':set(['5b','7b','29','31','12b','28b','32b','16b']),
         '23b':set(['6b','8b','38b','40b','13b','29b']),
         '24b':set(['7b','31','14b','30b']),
         '25b':set(['10b','18','27','19b']),
         '26b':set(['9b','11b','17','19','28','20b']),
         '27b':set(['10b','12b','18','20','29','21b','17b','25']),
         '28b':set(['18b','26','30','22b','11b','13b','19','21']),
         '29b':set(['12b','14b','44','46','39','23','19','35']),
         '30b':set(['13b','15b','40','24','45','47','20','36']),
         '31b':set(['14b','16b','22','24','21b','29']),
         '32b':set(['15b','23','22b','30'])          
         }




def bfs(graf,mulai,tujuan):
    
    queue = [[mulai]]
    visited = set()

    while queue:     
       
        jalur = queue.pop(0)

        
        state = jalur[-1]
        if state == tujuan:
        
            return jalur
       
        elif state not in visited:
            for cabang in graf.get(state, []): 
                jalur_baru = list(jalur) 
                jalur_baru.append(cabang) 
                queue.append(jalur_baru) 

           
            visited.add(state)

        
        isi = len(queue)
        if isi == 0:
            print("Tidak ditemukan")

def dfs(graf, mulai, tujuan):
    stack = [[mulai]]
    visited = set()

    while stack:
        
        panjang_tumpukan = len(stack)-1
        
       
        jalur = stack.pop(panjang_tumpukan)

        
        state = jalur[-1]

        
        if state == tujuan:
            return jalur
        
        elif state not in visited:
            
            for cabang in graf.get(state, []): 
                jalur_baru = list(jalur) 
                jalur_baru.append(cabang) 
                stack.append(jalur_baru)

            
            visited.add(state)


        
        isi = len(stack)
        if isi == 0:
            print("Tidak ditemukan")

